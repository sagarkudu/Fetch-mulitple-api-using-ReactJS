{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","createDataObject","promData","Promise","all","then","resolvedDataArr","setState","data17","rates","data18","res","Object","keys","state","map","key","countryCode","value17","toFixed","value18","perDiff","sort","a","b","resultData","prom17","fetch","prom18","resp","textDataArr","length","push","json","className","this","item","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8NAgHeA,G,wDA3Gb,aAAe,IAAD,8BACZ,gBAsDJC,iBAAmB,SAACC,GAChBC,QAAQC,IAAIF,GAAUG,MAAK,SAACC,GAC1B,EAAKC,SAAS,CAACC,OAAOF,EAAgB,GAAGG,QACzC,EAAKF,SAAS,CAACG,OAAOJ,EAAgB,GAAGG,QAEzC,IAAIE,EAAMC,OAAOC,KAAK,EAAKC,MAAMN,QAAQO,KAAI,SAACC,GAC5C,MAAO,CACLC,YAAaD,EACbE,QAAS,EAAKJ,MAAMN,OAAOQ,GAAKG,QAAQ,GACxCC,QAAS,EAAKN,MAAMJ,OAAOM,GAAKG,QAAQ,GACxCE,SAAU,EAAKP,MAAMJ,OAAOM,GAAO,EAAKF,MAAMN,OAAOQ,IAA+B,IAAzB,EAAKF,MAAMN,OAAOQ,KAAaG,QAAQ,OAGtGR,EAAIW,MAAK,SAASC,EAAEC,GAAG,OAAOD,EAAEF,QAAQG,EAAEH,WAC1C,EAAKd,SAAS,CAACkB,WAAYd,QAnE7B,EAAKG,MAAM,CACTN,OAAQ,KACRE,OAAQ,KACRe,WAAY,MALF,E,gEAUO,IAAD,OACdC,EAASC,MAAM,mFACfC,EAASD,MAAM,mFAkBnBxB,QAAQC,IAAI,CAACsB,EAAQE,IAASvB,MAAK,SAACwB,GAElC,IAAIC,EAAc,GAEfD,GAAQA,EAAKE,OAAS,GACvBD,EAAYE,KAAKH,EAAK,GAAGI,QAOxBJ,GAAQA,EAAKE,OAAS,GACvBD,EAAYE,KAAKH,EAAK,GAAGI,QAMxBH,GAAeA,EAAYC,QAC5B,EAAK9B,iBAAiB6B,Q,+BAwB1B,OAAO,oCACL,yBAAKI,UAAU,OACf,kDACA,+BACE,+BACE,4BACE,sCACA,oCACA,oCACA,4CAGJ,+BAEIC,KAAKrB,MAAMW,WACXU,KAAKrB,MAAMW,WAAWV,KAAK,SAACqB,GAAD,OAC3B,4BACE,4BAAKA,EAAKnB,aACV,4BAAKmB,EAAKlB,SACV,4BAAKkB,EAAKhB,SACV,4BAAKgB,EAAKf,aAIZ,a,GApGMgB,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.bc8d0cc9.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state={\n      data17: null,\n      data18: null,\n      resultData: null\n    }\n  }\n\n  //we should call all api in componentDidMount, because html content will until data is loaded.\n  componentDidMount() {\n    let prom17 = fetch('http://data.fixer.io/api/2017-01-01?access_key=401b813f53bc48488e308cb9a13e06fb');\n    let prom18 = fetch('http://data.fixer.io/api/2018-01-01?access_key=401b813f53bc48488e308cb9a13e06fb');\n\n\n    // let resultArr = [\n    //       {\n    //       countryCode: \"XYZ\",\n    //       value17: 10.2,\n    //       value18: 22.22,\n    //       perDiff: 2.01 // Calculate3d value\n    //     },\n    //     {\n    //       countryCode: \"ABC\",\n    //       value17: 50.2,\n    //       value18: 26.22,\n    //       perDiff: 1.01 // Calculate3d value\n    //     }\n    //   ];\n\n    Promise.all([prom17, prom18]).then((resp) => {\n\n      let textDataArr = [];\n      \n      if(resp && resp.length > 0) {\n        textDataArr.push(resp[0].json());\n        // .then((result) => {\n        //   //put this data into state\n        //   this.setState({data17:result.rates});\n        // })\n      }\n\n      if(resp && resp.length > 1) {\n        textDataArr.push(resp[1].json());\n        // resp[1].json().then((result) => {\n        //   //put this data into state\n        //   this.setState({data18:result.rates});\n        // })\n      }\n      if(textDataArr && textDataArr.length) {\n        this.createDataObject(textDataArr);\n      }\n    })\n  }\n\ncreateDataObject = (promData) => {\n    Promise.all(promData).then((resolvedDataArr) => {\n      this.setState({data17:resolvedDataArr[0].rates});\n      this.setState({data18:resolvedDataArr[1].rates});\n\n      let res = Object.keys(this.state.data17).map((key) => {\n        return {\n          countryCode: key,\n          value17: this.state.data17[key].toFixed(2),\n          value18: this.state.data18[key].toFixed(2),\n          perDiff: (this.state.data18[key] - this.state.data17[key]/(this.state.data17[key] * 100)).toFixed(2) // Calculate3d value\n        };\n      });\n      res.sort(function(a,b){return a.perDiff-b.perDiff});\n      this.setState({resultData: res});\n    });\n  }\n\n  render() {\n    return <>\n      <div className=\"App\">\n      <h1>Fetch Currency API</h1>\n      <table>\n        <thead>\n          <tr>\n            <th>Symbol</th>\n            <th>2017</th>\n            <th>2018</th>\n            <th>Per Change</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            this.state.resultData ?\n            this.state.resultData.map ((item) => \n            <tr>\n              <td>{item.countryCode}</td>\n              <td>{item.value17}</td>\n              <td>{item.value18}</td>\n              <td>{item.perDiff}</td>\n            </tr>\n            )\n            :\n            null\n          }\n        </tbody>\n      </table>\n      </div>\n    </>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <App />,\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}